import React from 'react';
import { Target } from 'lucide-react';
import KPICard from './KPICard';
import { formatDeadlineStatus, formatPercentage } from '@/utils/kpiFormatters';

interface ProjectDeadlineCardProps {
  deadlineStatus: 'on-time' | 'at-risk' | 'delayed';
  completionPercentage: number;
  lastUpdated: Date;
  isCalculating?: boolean;
  calculationId?: string;
  processingTime?: number;
  cacheHit?: boolean;
  calculationVersion?: string;
}

const ProjectDeadlineCard: React.FC<ProjectDeadlineCardProps> = ({
  deadlineStatus,
  completionPercentage,
  lastUpdated,
  isCalculating = false,
  calculationId,
  processingTime,
  cacheHit = false,
  calculationVersion
}) => {
  const getCardStatus = (status: 'on-time' | 'at-risk' | 'delayed') => {
    const statusMap = {
      'on-time': 'success' as const,
      'at-risk': 'warning' as const,
      'delayed': 'error' as const
    };
    return statusMap[status];
  };

  const getStatusEmoji = (status: 'on-time' | 'at-risk' | 'delayed') => {
    const emojiMap = {
      'on-time': '‚úÖ',
      'at-risk': '‚ö†Ô∏è',
      'delayed': 'üî¥'
    };
    return emojiMap[status];
  };

  const getDescription = (status: 'on-time' | 'at-risk' | 'delayed', percentage: number) => {
    const baseDescription = `Projeto ${formatPercentage(percentage, 0)} conclu√≠do`;
    
    switch (status) {
      case 'on-time':
        return `${baseDescription}. Todas as tarefas est√£o dentro do prazo estabelecido.`;
      case 'at-risk':
        return `${baseDescription}. Algumas tarefas apresentam risco de atraso.`;
      case 'delayed':
        return `${baseDescription}. Projeto com atrasos significativos identificados.`;
      default:
        return baseDescription;
    }
  };

  // Calcula tend√™ncia baseada no status (em implementa√ß√£o real viria de dados hist√≥ricos)  
  const getTrend = (status: 'on-time' | 'at-risk' | 'delayed') => {
    // Em uma implementa√ß√£o real, isso viria de dados hist√≥ricos
    return undefined; // Removendo a simula√ß√£o para usar apenas dados reais
  };

  return (
    <KPICard
      title="Produtividade da Squad"
      value={`${formatPercentage(completionPercentage, 0)}`}
      status={getCardStatus(deadlineStatus)}
      trend={getTrend(deadlineStatus)}
      subtitle="aproveitamento m√©dio da equipe"
      icon={Target}
      description={`Produtividade m√©dia da equipe baseada em ${formatPercentage(completionPercentage, 0)} de aproveitamento geral das tarefas conclu√≠das pelos membros cadastrados.`}
      tooltipTitle="Produtividade da Squad"
      tooltipDescription="Este KPI calcula a produtividade m√©dia da equipe em percentual, considerando o aproveitamento de todos os players cadastrados."
      tooltipDetails={[
        "ÔøΩ C√°lculo baseado em tarefas conclu√≠das vs total de tarefas",
        "ÔøΩ Considera todos os membros da equipe cadastrados",
        "ÔøΩ Percentual de aproveitamento m√©dio da squad",
        "üéØ Indica a efici√™ncia geral da equipe",
        "‚ö° Atualizado automaticamente quando dados mudam"
      ]}
      tooltipCalculation="Produtividade = (Tarefas Conclu√≠das / Total de Tarefas) √ó 100"
      lastUpdated={lastUpdated}
      isCalculating={isCalculating}
      calculationId={calculationId}
      processingTime={processingTime}
      cacheHit={cacheHit}
      calculationVersion={calculationVersion}
    />
  );
};

export default ProjectDeadlineCard;